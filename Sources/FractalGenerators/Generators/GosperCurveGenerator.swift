//
//  GosperCurveGenerator.swift
//  FractalsShowcase
//
//  Created by Mateusz Kosikowski 2021.
//

import CoreGraphics
import Foundation
import SwiftUI

/**
 * Gosper Curve (Flowsnake) Fractal Generator
 *
 * The Gosper Curve is a space-filling curve generated by an L-system.
 *
 * L-system rules:
 * - Axiom: "A"
 * - Rules:
 *   A → A+B++B-A--AA-B+
 *   B → -A+BB++B+A--A-B
 * - Angle: 60°
 *
 * Properties:
 * - Space-filling: covers the plane as depth increases
 * - Fractal dimension ≈ 1.129
 * - Self-similar at all scales
 */

struct GosperCurveParameters: FractalParameters {
    let iterations: Int
    let size: CGSize
    let depth: Int
    init(depth: Int = 4, size: CGSize = CGSize(width: 600, height: 600)) {
        self.depth = depth
        iterations = depth
        self.size = size
    }
}

struct GosperCurveGenerator: PathFractalGenerator {
    typealias Parameters = GosperCurveParameters
    typealias Output = Path

    func generate(with parameters: GosperCurveParameters) -> Path {
        generatePath(with: parameters)
    }

    func generateAsync(with parameters: GosperCurveParameters, progress _: @escaping (Double) -> Void, completion: @escaping (Path) -> Void) {
        completion(generate(with: parameters))
    }

    func generatePath(with parameters: GosperCurveParameters) -> Path {
        let instructions = gosperLSystem(depth: parameters.depth)
        let angle: CGFloat = .pi / 3 // 60°
        let step: CGFloat = parameters.size.width / pow(2.0, CGFloat(parameters.depth)) / 1.5
        var path = Path()
        var position = CGPoint(x: parameters.size.width * 0.1, y: parameters.size.height * 0.7)
        var direction: CGFloat = 0
        var started = false
        for char in instructions {
            switch char {
            case "A", "B":
                let next = CGPoint(x: position.x + cos(direction) * step, y: position.y + sin(direction) * step)
                if !started {
                    path.move(to: position)
                    started = true
                }
                path.addLine(to: next)
                position = next
            case "+":
                direction += angle
            case "-":
                direction -= angle
            default:
                break
            }
        }
        return path
    }

    private func gosperLSystem(depth: Int) -> String {
        var current = "A"
        for _ in 0 ..< depth {
            var next = ""
            for char in current {
                switch char {
                case "A": next += "A+B++B-A--AA-B+"
                case "B": next += "-A+BB++B+A--A-B"
                default: next.append(char)
                }
            }
            current = next
        }
        return current
    }
}
